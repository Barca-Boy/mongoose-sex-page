// Generated by CoffeeScript 1.12.6
(function() {
  var Pagnation, Promise, friendly;

  Promise = require('bluebird');

  friendly = function(total, display, current) {
    var half, left, pages, right;
    left = 1;
    right = total;
    pages = [];
    if (total >= display + 1) {
      half = Math.ceil(display / 2);
      if (current > half && current < total - (half - 1)) {
        left = current - half;
        right = current + half - 1;
      } else {
        if (current <= half) {
          left = 1;
          right = display;
        } else {
          right = total;
          left = total - (display - 1);
        }
      }
    }
    while (left <= right) {
      pages.push(left);
      left++;
    }
    return pages;
  };

  Pagnation = (function() {
    function Pagnation(model) {
      this.model = this.__model__ = model;
      this.index = 1;
      this.count = 20;
      this.display = 0;
      this.selection = this.population = this.condition = this.sorting = {};
    }

    Pagnation.prototype.display = function(display) {
      this.display = display;
      return this;
    };

    Pagnation.prototype.find = function(condition) {
      this.condition = condition;
      return this;
    };

    Pagnation.prototype.select = function(selection) {
      this.selection = selection;
      return this;
    };

    Pagnation.prototype.populate = function(population) {
      this.population = population;
      return this;
    };

    Pagnation.prototype.sort = function(sorting) {
      this.sorting = sorting;
      return this;
    };

    Pagnation.prototype.page = function(index) {
      this.index = index;
      return this;
    };

    Pagnation.prototype.size = function(count) {
      this.count = count;
      return this;
    };

    Pagnation.prototype.exec = function() {
      var promiseCount, promiseRecords, skip;
      skip = (this.index - 1) * this.count;
      promiseCount = this.__model__.where(this.condition).count().exec();
      promiseRecords = this.model.find(this.condition).select(this.selection).sort(this.sorting).skip(skip).limit(this.count).populate(this.population).exec();
      return Promise.all([promiseCount, promiseRecords]).bind(this).then(function(arg) {
        var final, records, total;
        total = arg[0], records = arg[1];
        final = {
          total: total,
          records: records,
          pages: Math.ceil(total / this.count)
        };
        if (this.display !== 0) {
          final.friendly = friendly(final.pages, this.display, this.index);
        }
        return final;
      });
    };

    return Pagnation;

  })();

}).call(this);
