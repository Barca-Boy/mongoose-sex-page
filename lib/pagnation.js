// Generated by CoffeeScript 1.12.7
(function() {
  var Pagnation, Promise, friendly;

  Promise = require('bluebird');

  friendly = function(total, display, current) {
    var half, left, pages, right;
    left = 1;
    right = total;
    pages = [];
    if (total >= display + 1) {
      half = Math.ceil(display / 2);
      if (current > half && current < total - (half - 1)) {
        if (display % 2 === 0) {
          left = current - half;
        } else {
          left = current - half + 1;
        }
        right = current + half - 1;
      } else {
        if (current <= half) {
          left = 1;
          right = display;
        } else {
          right = total;
          left = total - (display - 1);
        }
      }
    }
    while (left <= right) {
      pages.push(left);
      left++;
    }
    return pages;
  };

  Pagnation = (function() {
    function Pagnation(model) {
      this.model = this.__model__ = model;
      this.index = 1;
      this.count = 20;
      this.friend = 0;
      this["extends"] = this.condition = this.selection = this.population = this.sorting = null;
    }

    Pagnation.prototype.find = function(condition) {
      this.condition = condition;
      return this;
    };

    Pagnation.prototype.select = function(selection) {
      this.selection = selection;
      return this;
    };

    Pagnation.prototype.populate = function(population) {
      this.population = population;
      return this;
    };

    Pagnation.prototype.sort = function(sorting) {
      this.sorting = sorting;
      return this;
    };

    Pagnation.prototype.page = function(index) {
      this.index = index;
      return this;
    };

    Pagnation.prototype.size = function(count) {
      this.count = count;
      return this;
    };

    Pagnation.prototype.display = function(friend) {
      this.friend = friend;
      return this;
    };

    Pagnation.prototype.extend = function(name, params) {
      if (this["extends"] == null) {
        this["extends"] = [];
      }
      this["extends"].push({
        name: name,
        params: params
      });
      return this;
    };

    Pagnation.prototype.exec = function(fn) {
      var extend, i, len, promiseCount, promiseRecords, ref, skip;
      skip = (this.index - 1) * this.count;
      if (this.condition == null) {
        this.condition = {};
      }
      promiseCount = this.__model__.where(this.condition).count().exec();
      promiseRecords = this.model.find(this.condition).skip(skip).limit(this.count);
      if (this["extends"] != null) {
        ref = this["extends"];
        for (i = 0, len = ref.length; i < len; i++) {
          extend = ref[i];
          if (this.model[extend.name] != null) {
            promiseRecords = promiseRecords[extend.name](extend.params);
          }
        }
      }
      if (this.selection != null) {
        promiseRecords = promiseRecords.select(this.selection);
      }
      if (this.sorting != null) {
        promiseRecords = promiseRecords.sort(this.sorting);
      }
      if (this.population) {
        promiseRecords = promiseRecords.populate(this.population);
      }
      return Promise.all([promiseCount, promiseRecords.exec()]).bind(this).then(function(arg) {
        var final, records, total;
        total = arg[0], records = arg[1];
        final = {
          page: this.index,
          size: this.count,
          total: total,
          records: records,
          pages: Math.ceil(total / this.count)
        };
        if (this.friend !== 0) {
          final.display = friendly(final.pages, this.friend, this.index);
        }
        if ((fn != null) && typeof fn === 'function') {
          return fn(null, final);
        } else {
          return final;
        }
      })["catch"](function(err) {
        if ((fn != null) && typeof fn === 'function') {
          return fn(err, null);
        } else {
          throw err;
        }
      });
    };

    return Pagnation;

  })();

  module.exports = Pagnation;

}).call(this);
